type Etudiant @model @auth(rules: [  { allow: owner, ownerField: "owner", operations: [create, read, update]
 } , { allow: public, operations: [create] }
]) {
  id: ID!
  nom: String!
  prenom: String!
  apogee: String! @index(name: "byApogee" ,queryField: "etudiantbyApogee")
  cin: String!
  cycle: Cycle! @index(name: "byCycle", queryField: "etudiantByCycle")
  email: AWSEmail! @index(name: "byEmail", queryField: "etudiantByEmail")
  owner: String
  filiereId: ID! @index(name: "byFiliereEtudiant", queryField: "etudiantByFiliere")
  filiere: Filiere @belongsTo(fields: ["filiereId"])
  demande: [Demande] @hasMany(fields: ["id"])

}

                                 
type Filiere @model  @auth(rules: [

  
  { allow: public, operations: [create, read, update, delete] },
  { allow: private, operations: [read] },
  { allow: owner, operations: [create, read, update] }

  ]) {
  id:ID!
  nomFiliere: NomFiliere! @index(name: "byNomFiliere",queryField: "nomFiliere")
  operateur: Operateur @hasOne(fields: ["id"])
  etudiants: [Etudiant] @hasMany( fields: ["id"])



}
type Operateur @model
  @auth(rules: [
    { allow: groups, groups: ["Operateurs"], operations: [read, create, update] }
  ]) {
  id: ID!
  nom: String!
  prenom: String!
  email: AWSEmail! @index(name: "byEmail", queryField: "operateurbyEmail")
  filiereId: ID! @index(name: "byFiliereOperateur")
  filiere: Filiere @belongsTo(fields: ["filiereId"])
}

type Demande @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, read, update,delete] },
  { allow: groups, groups: ["Operateurs"], operations: [read, update] }
]) {
  id:ID!
  typeDemande: TypeDemande!
  status: Status!
  commentaire: String
  etudiantId: ID!
  etudiant: Etudiant @belongsTo(fields:["etudiantId"]) 
  createdAt: AWSDateTime
  updatedAt: AWSDateTime


}





enum NomFiliere {
  BIOLOGIE
  PHYSIQUE
  CHIMIE
  MATH
  INFORMATIQUE
}

enum Cycle {
  LICENCE
  MASTER
}

enum TypeDemande {
  ABSENCE
  INSCRIPTIONPEDAGOGIQUE
  CHANGEMENTFILIERE
  AJOUTMODULE
}

enum Status{
  REFUS
  ENCOURS
  ACCEPTE
}                        